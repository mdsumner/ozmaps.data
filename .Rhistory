srcs <- grep("geopackage.zip", tx, value = TRUE)
src <- file.path("http://www.abs.gov.au", unlist(lapply(strsplit(unlist(lapply(strsplit(srcs, "href=\"/"), function(x) x[2])), "\"><img src="), function(a) a[1])))
src <- gsub(" ", "%20", src)
bname <- unlist(lapply(strsplit(src, "&"), function(a) a[2]))
for (i in seq_along(src)) {
aname <- file.path("extdata/abs", bname[i])
if (!file.exists(aname)) {
curl::curl_download(src[i], aname)
}
}
## GPKG
srcs <- grep("geopackage.zip|gpkg.zip", tx, value = TRUE)
src <- file.path("http://www.abs.gov.au", unlist(lapply(strsplit(unlist(lapply(strsplit(srcs, "href=\"/"), function(x) x[2])), "\"><img src="), function(a) a[1])))
src <- gsub(" ", "%20", src)
bname <- unlist(lapply(strsplit(src, "&"), function(a) a[2]))
bname
## SHP
srcs <- grep("shp.zip|shape.zip", tx, value = TRUE)
src <- file.path("http://www.abs.gov.au", unlist(lapply(strsplit(unlist(lapply(strsplit(srcs, "href=\"/"), function(x) x[2])), "\"><img src="), function(a) a[1])))
src <- gsub(" ", "%20", src)
bname <- unlist(lapply(strsplit(src, "&"), function(a) a[2]))
bname
##  https://github.com/mdsumner/ozmaps/issues/5#issuecomment-427731457
# #Volume 1 – Main Structure and Greater Capital City Statistical Areas
#
# http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.001July%202016?OpenDocument
#
# #Volume 2 – Indigenous Structure
#
# http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.002July%202016?OpenDocument
#
# Volume 3 – Non ABS Structures
#
# http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.003July%202018?OpenDocument
#
# Volume 4 – Significant Urban Areas, Urban Centres and Localities, Section of State
#
# http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.004July%202016?OpenDocument
#
# Volume 5 – Remoteness Structure   (this has GPKG)
#
# http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.005July%202016?OpenDocument
#
# Census of Population and Housing Destination Zones
#
# http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/8000.0August%202016?OpenDocument
urls <-
c("http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.001July%202016?OpenDocument",
"http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.002July%202016?OpenDocument",
"http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.003July%202018?OpenDocument",
"http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.004July%202016?OpenDocument",
"http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/1270.0.55.005July%202016?OpenDocument",
"http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/8000.0August%202016?OpenDocument"
)
tx <- unlist(lapply(urls, readLines))
## GPKG
srcs <- grep("geopackage.zip|gpkg.zip", tx, value = TRUE)
src <- file.path("http://www.abs.gov.au", unlist(lapply(strsplit(unlist(lapply(strsplit(srcs, "href=\"/"), function(x) x[2])), "\"><img src="), function(a) a[1])))
src <- gsub(" ", "%20", src)
bname <- unlist(lapply(strsplit(src, "&"), function(a) a[2]))
for (i in seq_along(src)) {
aname <- file.path("extdata/abs", bname[i])
if (!file.exists(aname)) {
curl::curl_download(src[i], aname)
}
}
for (i in seq_along(src)) {
aname <- file.path("extdata/abs", bname[i])
unzip(aname, exdir = "extdata/abs-gpkg")
}
## SHP
srcs <- grep("shp.zip|shape.zip", tx, value = TRUE)
src <- file.path("http://www.abs.gov.au", unlist(lapply(strsplit(unlist(lapply(strsplit(srcs, "href=\"/"), function(x) x[2])), "\"><img src="), function(a) a[1])))
src <- gsub(" ", "%20", src)
bname <- unlist(lapply(strsplit(src, "&"), function(a) a[2]))
for (i in seq_along(src)) {
aname <- file.path("extdata/abs", bname[i])
if (!file.exists(aname)) {
curl::curl_download(src[i], aname)
}
}
for (i in seq_along(src)) {
aname <- file.path("extdata/abs", bname[i])
unzip(aname, exdir = "extdata/abs-shp")
}
unlink("abs.tar.gz")
system("tar cvzf abs.tar.gz extdata/abs-gpkg")
writeLines(files, "abslist-gpkg.txt")
library(piggyback)
pb_upload("abs.tar.gz", tag = "v0.0.2")
unlink("abs-shp.tar.gz")
system("tar cvzf abs-shp.tar.gz extdata/abs-shp")
files <- list.files("extdata/abs-shp", recursive = TRUE)
writeLines(files, "abslist-shp.txt")
library(piggyback)
library(silicate)
plot(islandstate)
library(anglr)
plot(islandstate)
data("wrld_simpl", package = "maptools")
x <- sf::st_as_sf(wrld_simpl)
x$uid <- 1:nrow(x)
data("wrld_simpl", package = "maptools")
x <- sf::st_as_sf(wrld_simpl)
x$uid <- 1:nrow(x)
library(dplyr)
x %>% st_cast("POLYGON") %>% group_by(uid) %>% slice(1L)
xx %>% st_cast("POLYGON") %>% group_by(uid) %>% slice(1L)
xx <- x %>% st_cast("POLYGON") %>% group_by(uid) %>% slice(1L)
plot(xx)
nrow(xx)
plot(xx["NAME"])
?pb_upload
library(piggyback)
?pb_upload
unlink("abs-gpkg.tar.gz")
system("tar cvzf abs-gpkg.tar.gz extdata/abs-gpkg")
files <- list.files("extdata/abs-gpkg", recursive = TRUE)
writeLines(files, "abslist-gpkg.txt")
library(piggyback)
pb_upload("abs-gpkg.tar.gz", tag = "v0.0.3")
pb_delete("abs.tar.gz")
?pb_delete
pb_delete("abs.tar.gz", "mdsumner/ozmaps.data", tag = "v0.0.1")
pb_upload("abs-shp.tar.gz", tag = "v0.0.3")
pb_list()
?pb_list
list.files("extdata/abs-gpkg/")
list.files("extdata/abs-gpkg/", pattern = "gpkg$")
library(sf)
st_layers("extdata/abs-gpkg/ASGS 2016 DZN.gpkg")
st_layers("extdata/abs-gpkg/ASGS 2016 RA.gpkg")
st_layers("extdata/abs-gpkg/ASGS 2016 Volume 1.gpkg")
st_layers("extdata/abs-gpkg/ASGS 2016 Volume 2.gpkg")
st_layers("extdata/abs-gpkg/ASGS 2016 Volume 3 2018.gpkg")
st_layers("extdata/abs-gpkg/ASGS 2016 Volume 4.gpkg")
f <- list.files("extdata/abs-gpkg/", pattern = "gpkg$", full.names = TRUE)
purrr::map(f, ~nrow(st_layers(.x)))
purrr::map(f, ~length(st_layers(.x)))
purrr::map(f, ~length(st_layers(.x)$name))
purrr::map_int(f, ~length(st_layers(.x)$name))
sum(purrr::map_int(f, ~length(st_layers(.x)$name)))
sum(purrr::map_chr(f, ~st_layers(.x)$name))
purrr::map_chr(f, ~st_layers(.x)$name)
purrr::map(f, ~st_layers(.x)$name)
unlist(purrr::map(f, ~st_layers(.x)$name))
f <- list.files("extdata/abs-shp/", pattern = "shp$", full.names = TRUE)
f
lga <- read_sf("extdata/abs-shp//LGA_2018_AUST.shp")
dim(lga)
names(lga)
plot(lga[2])
library(rmapshaper)
lga_s <- ms_simplify(lga)
plot(lga_s[2])
pryr::object_size(lga_s)
pryr::object_size(lga)
names(lga)
unique(lga_s$STE_NAME16)
plot(lga_s %>% dplyr::filter(STE_NAME16 == "Tasmania") %>% dplyr::select(LGA_NAME18))
plot(lga_s %>% dplyr::filter(STE_NAME18 == "Kingboroough") %>% dplyr::select(LGA_NAME18))
plot(lga_s %>% dplyr::filter(STE_NAME18 == "Kingborough") %>% dplyr::select(LGA_NAME18))
plot(lga_s %>% dplyr::filter(STE_NAME16 == "Kingborough") %>% dplyr::select(LGA_NAME18))
lga$STE_NAME16
plot(lga_s %>% dplyr::filter(LGA_NAME16 == "Kingborough") %>% dplyr::select(LGA_NAME18))
plot(lga_s %>% dplyr::filter(LGA_NAME18 == "Kingborough") %>% dplyr::select(LGA_NAME18))
plot(lga_s %>% dplyr::filter(LGA_NAME16 == "Kingborough") %>% dplyr::select(LGA_NAME18))
lga$LGA_NAME18
plot(lga_s %>% dplyr::filter(stringr::str_detect(LGA_NAME16  "Kingborough")) %>% dplyr::select(LGA_NAME18))
plot(lga_s %>% dplyr::filter(stringr::str_detect(LGA_NAME16, "Kingborough")) %>% dplyr::select(LGA_NAME18))
plot(lga_s %>% dplyr::filter(stringr::str_detect(LGA_NAME18, "Kingborough")) %>% dplyr::select(LGA_NAME18))
plot(lga_s %>% dplyr::filter(stringr::str_detect(LGA_NAME18, "Kingborough")) %>% dplyr::select(LGA_NAME18), reset = T)
plot(lga_s[2], add = T)
plot(lga_s %>% dplyr::filter(stringr::str_detect(LGA_NAME18, "Kingborough")) %>% dplyr::pull(geometry), reset = T)
plot(lga_s[2], add = T)
plot(sample_n(lga_s[2], 562), add = T)
library(dplyr)
plot(sample_n(lga_s[2], 562), add = T)
nrow(lga_s)
plot(sample_n(lga_s[2], nrow(lga_s)), add = T)
names(lga_s)
plot(sample_n(lga_s[1], nrow(lga_s)), add = T)
pryr::object_size(lga)
pryr::object_size(lga_s)
plot(1:10)
xy <- locator(type = "l")
plot(raster(volcano))
library(raster)
plot(raster(volcano))
xy <- locator(type = "l")
xy
fortunes::fortune( Windows is fond)
fortunes::fortune(   " Windows is fon")
install.packages("fortune")
install.packages("fortunes")
fortunes::fortune("Windows is fond")
fortunes::fortune("beeping")
fortunes::fortune("beeping")
fortunes::fortune("beeping")
fortunes::fortune("beeping")
fortunes::fortune("beeping")
u <- "http://services.land.vic.gov.au/SpatialDatamart/publicAccessOrderDownload.html?fileName=SDM539272.zip&orderId=539272 "
f <- file.path("extdata/vicmap/address", "SDM539272.zip")
curl::curl_download(u, f)
u <- "http://services.land.vic.gov.au/SpatialDatamart/publicAccessOrderDownload.html?fileName=SDM539272.zip&orderId=539272"
f <- file.path("extdata/vicmap/address", "SDM539272.zip")
curl::curl_download(u, f)
library(piggyback)
pb_upload(f, tag = "v0.0.3")
list.files("extdata/abs-shp", pattern = "AUST.*shp$", full.names = TRUE)
fs <- list.files("extdata/abs-shp", pattern = "AUST.*shp$", full.names = TRUE)
sort(file.info(fs)$size)/1e6
l <- purrr::map(fs, ~rmapshaper::ms_simplify(sf::read_sf(.x)))
pryr::object_size(l)
length(l)
basename(f)
basename(fs)
for (i in seq_along(l)) {
saveRDS(l[[i]], file.path("extdata/ABS-simplified", gsub("shp", "rds", basename(fs[i]))))
}
names(l[[1]])
names(l[[2]])
lapply(l, names)
library(piggyback)
unlink("abs-simplified.tar.gz")
system("tar cvzf abs-simplified.tar.gz extdata/abs-simplified")
files <- list.files("extdata/abs-simplified", recursive = TRUE)
writeLines(files, "abs-simplified-list.txt")
pb_upload("abs-simplified.tar.gz", tag = "v0.0.3")
plot(l[[1]])
library(sf)
plot(l[[1]])
plot(l[[1]][1])
l[[1]]
fs
plot(l[[2]][2])
l[[2]]
library(tibble)
tibble(file = fs)
tibble(file = basename(fs))
purrr::transpose(tibble(file = basename(fs)))
?tribble
tribble(
~file, ~desc, ~core,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
fs[3]
"plot(l[[3]][1]"
plot(l[[3]][1])
plot(l[[3]][2])
par(mfrow = c(2, 1))
plot(l[[2]][2])
par(mfrow = c(2, 1))
plot(l[[2]][2], reset = TRUE)
?plot
par(mfrow = c(2, 1))
plot(st_geometry(l[[2]]))
par(mfrow = c(2, 1), mar = rep(0, 4))
plot(st_geometry(l[[2]]), asp = "")
plot(l[[2]][2], add = TRUE)
plot(st_geometry(l[[3]]), asp = "")
graphics.off()
plot(st_geometry(l[[2]]), asp = "")
par(mfrow = c(2, 1), mar = rep(0, 4))
plot(st_geometry(l[[2]]), asp = "")
plot(st_geometry(l[[3]]), asp = "")
fs[4]
plot(l[[4]][2])
purrr::map_int(l, pryr::object_size)
purrr::map_dbl(l, pryr::object_size)
purrr::map_dbl(l, pryr::object_size)/1e6
fs[5]
plot(l[[5]][2])
plot(l[[5]][1])
plot(l[[5]][3])
l[[5]]$IAR_NAME16
purrr::map_dbl(l, pryr::object_size)/1e6
fs[6]
plot(l[[6]][2])
fs[7]
fs[8]
fs[9]
plot(l[[8]][2])
plot(l[[9]][2])
fs[10]
purrr::map_dbl(l, pryr::object_size)/1e6
plot(l[[10]][2])
plot(l[[10]][2], border = NA)
names(l[[10]])
fs[10]
plot(l[[10]][1], border = NA)
sample(l[[10]][[1]], 10)
sample(l[[10]][[2]], 10)
sample(l[[10]][[3]], 10)
sample(l[[10]][[4]], 10)
sample(l[[10]][[5]], 10)
purrr::map_dbl(l, pryr::object_size)/1e6
fs[11]
plot(l[[11]][1], border = NA)
fs[12]
plot(l[[12]][1], border = NA)
fs[13]
fs[14]
fs[15]
fs[16]
fs[17]
plot(l[[13]][1], border = NA)
plot(l[[14]][1], border = NA)
plot(l[[15]][1], border = NA)
plot(l[[16]][1], border = NA)
plot(l[[17]][1], border = NA)
purrr::map_dbl(l, pryr::object_size)/1e6
fs[18]
plot(l[[18]][1], border = NA)
plot(l[[18]][2], border = NA)
l[[18]]$SUA_NAME16
purrr::map_dbl(l, pryr::object_size)/1e6
fs[19]
l[[19]]$SUA_NAME16
plot(l[[19]][1])
plot(l[[19]][2])
tribble(
~file, ~desc, ~core, ~compressed,
#--|--|----
1, "AUST", FALSE, 1.74,
2, "CED", TRUE, 2.72,
3, "DZN",  FALSE, 12.1,
4, "GCCSA", TRUE, 2.02,
5, "IARE", FALSE, 3.6,
6, "ILOC", FALSE, 4.56,
7, "IREG", TRUE, 2.33,
8, "LGA", TRUE, 3.86,
9, "RA",  TRUE, 2.7,
10, "SA1", FALSE, 56,
11, "SA2", TRUE, 6.2,
12, "SA3", TRUE, 3.3,
13, "SA4", TRUE, 2.6,
14, "SED", TRUE, 3.34,
15, "SOS", FALSE, 3.4,
16, "SOSR", FALSE, 3.4,
17, "STE", TRUE, 1.93,
18, "SUA", FALSE, 2.31,
19, "UCL", FALSE, 4.23
)
abs <- tribble(
~file, ~desc, ~core, ~compressed,
#--|--|----
1, "AUST", FALSE, 1.74,
2, "CED", TRUE, 2.72,
3, "DZN",  FALSE, 12.1,
4, "GCCSA", TRUE, 2.02,
5, "IARE", FALSE, 3.6,
6, "ILOC", FALSE, 4.56,
7, "IREG", TRUE, 2.33,
8, "LGA", TRUE, 3.86,
9, "RA",  TRUE, 2.7,
10, "SA1", FALSE, 56,
11, "SA2", TRUE, 6.2,
12, "SA3", TRUE, 3.3,
13, "SA4", TRUE, 2.6,
14, "SED", TRUE, 3.34,
15, "SOS", FALSE, 3.4,
16, "SOSR", FALSE, 3.4,
17, "STE", TRUE, 1.93,
18, "SUA", FALSE, 2.31,
19, "UCL", FALSE, 4.23
)
abs %>% dplyr::filter(core)
abs %>% dplyr::filter(core) %>% summarize(sum(size))
abs <- tribble(
~file, ~desc, ~core, ~size,
#--|--|----
1, "AUST", FALSE, 1.74,
2, "CED", TRUE, 2.72,
3, "DZN",  FALSE, 12.1,
4, "GCCSA", TRUE, 2.02,
5, "IARE", FALSE, 3.6,
6, "ILOC", FALSE, 4.56,
7, "IREG", TRUE, 2.33,
8, "LGA", TRUE, 3.86,
9, "RA",  TRUE, 2.7,
10, "SA1", FALSE, 56,
11, "SA2", TRUE, 6.2,
12, "SA3", TRUE, 3.3,
13, "SA4", TRUE, 2.6,
14, "SED", TRUE, 3.34,
15, "SOS", FALSE, 3.4,
16, "SOSR", FALSE, 3.4,
17, "STE", TRUE, 1.93,
18, "SUA", FALSE, 2.31,
19, "UCL", FALSE, 4.23
)
library(dplyr)
abs %>% dplyr::filter(core) %>% summarize(sum(size))
abs %>% dplyr::filter(core) %>% pull(desc)
fs
l[[17]]
pryr::object_size(l[[17]])
pryr::object_size(read_sf(fs[17]))
list.files("extdata/abs-shp", pattern = "shp$", full.names = TRUE)
setdiff(list.files("extdata/abs-shp", pattern = "shp$", full.names = TRUE), fs))
setdiff(list.files("extdata/abs-shp", pattern = "shp$", full.names = TRUE), fs)
fs
plot(l[[17]][2])
plot(l[[2]][2])
plot(l[[14]][2])
files <- list.files("extdata/abs-simplified",pattern = "AUST.*shp$", recursive = TRUE)
files
files <- list.files("extdata/abs-simplified",pattern = "AUST.*rds$", recursive = TRUE)
files
?writeValues
library(raster)
?writeValues
?raster::writeValues
?writeValues
library(raster)
remove.packages("raster")
library(raster)
?writeValues
devtools::install_github("hypertidy/ffraster")
remove.packages("Rcpp")
devtools::install_github("hypertidy/ffraster")
library(ffraster)
?ffraster::ff_object
ffraster:::.writeGRD
ffraster:::.writeGRD
library(raster)
f <- rasterTmpFile()
r <- raster(volcano)
ffraster:::.writeGRD(r, filename = f, nbands = 4)
ffraster:::.writeGRD(r, filename = f, nbands = 4, dates = as.Date("2012-01-01") + 1:4)
readLines(f)
dim(r)
nrow(r)
a  <- ffrarr(c(nrow(r), ncol(r), 4), filename = f, readonly = FALSE)
a  <- ffrarr(c(nrow(r), mode = "float", ncol(r), 4), filename = f, readonly = FALSE)
a  <- ffrarr(c(nrow(r), ncol(r), 4), mode = "float", filename = f, readonly = FALSE)
a  <- ffrarr(c(nrow(r), ncol(r), 4), mode = "float32", filename = f, readonly = FALSE)
?ff::vmode
a  <- ffrarr(c(nrow(r), ncol(r), 4), mode = "single", filename = f, readonly = FALSE)
a
ff::filename(a)
dim(a)
a[,,1]
a[,,1] <- values(r)
a[,,2] <- values(r)*2
a[,,3] <- values(r)*3
a[,,4] <- values(r)*4
b <- brick(f)
sf::st_layers("extdata/ga/geodata-coast/australia/cstauscd.e00")
cstaus <- sf::read_sf("extdata/ga/geodata-coast/australia/cstauscd.e00", layer = "ARC")
dim(cstaus)
library(sf)
names(cstau)
names(cstaus)
plot(cstaus[9])
pryr::object_size(cstaus)
plot(cstaus[1, 9])
plot(cstaus[1:100, 9])
plot(cstaus[1:1000, 9])
plot(cstaus[1:10000, 9])
dim(cstaus)
u <- "http://services.land.vic.gov.au/SpatialDatamart/publicAccessOrderDownload.html?fileName=SDM539272.zip&orderId=539272"
f <- file.path("extdata/vicmap/address", "SDM539272.zip")
f
file.copy(f, ".")
pb_delete(f)
library(piggyback)
pb_delete(f)
pb_upload(basename(f), tag = "v0.0.3")
library(ozmaps.data)
library(ozmaps.data)
devtools::load_all(".")
abs
devtools::load_all(".")
ozmaps.data:::absfiles
ceramic::ceramic_tiles()
ceramic::ceramic_tiles()$fullname[1]
b <- raster::brick(ceramic::ceramic_tiles()$fullname[1])
b
plotRGB(b)
library(raster)
plotRGB(b)
writeRaster(b, "file.png")
?writeRaster
rgdal::writeGDAL(as(b, "SpatialGridDataFrame"), "file.png", driver = "PNG")
writeFormats()
writeFormats()$name
writeFormats()[, "name"]
writeFormats()[, "name"] %>% sort()
library(magrittr)
writeFormats()[, "name"] %>% sort()
filetype <- .filetype(format=format, filename=filename)
filename <- .getExtension(filename, filetype)
format = "PNG"
filename = "file"
filetype <- .filetype(format=format, filename=filename)
filename <- .getExtension(filename, filetype)
filetype <- raster:::.filetype(format=format, filename=filename)
filename <- .getExtension(filename, filetype)
filetype
filetype <- raster:::.filetype(format=format, filename=filename)
filename <- raster:::.getExtension(filename, filetype)
filename
raster:::.writeGDALall
raster:::.startGDALwriting
writeRaster(b, "file.png", format = "PNG")
writeRaster(b, "file.png", driver  = "PNG")
library(ozmaps.data)
usethis::use_news_md()
